// Generated by gencpp from file cartbot/Cluster.msg
// DO NOT EDIT!


#ifndef CARTBOT_MESSAGE_CLUSTER_H
#define CARTBOT_MESSAGE_CLUSTER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace cartbot
{
template <class ContainerAllocator>
struct Cluster_
{
  typedef Cluster_<ContainerAllocator> Type;

  Cluster_()
    : Header()
    , id(0)
    , mid_x(0.0)
    , mid_y(0.0)
    , dist(0.0)
    , points()  {
    }
  Cluster_(const ContainerAllocator& _alloc)
    : Header(_alloc)
    , id(0)
    , mid_x(0.0)
    , mid_y(0.0)
    , dist(0.0)
    , points(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _Header_type;
  _Header_type Header;

   typedef int32_t _id_type;
  _id_type id;

   typedef double _mid_x_type;
  _mid_x_type mid_x;

   typedef double _mid_y_type;
  _mid_y_type mid_y;

   typedef double _dist_type;
  _dist_type dist;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _points_type;
  _points_type points;





  typedef boost::shared_ptr< ::cartbot::Cluster_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartbot::Cluster_<ContainerAllocator> const> ConstPtr;

}; // struct Cluster_

typedef ::cartbot::Cluster_<std::allocator<void> > Cluster;

typedef boost::shared_ptr< ::cartbot::Cluster > ClusterPtr;
typedef boost::shared_ptr< ::cartbot::Cluster const> ClusterConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartbot::Cluster_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartbot::Cluster_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartbot::Cluster_<ContainerAllocator1> & lhs, const ::cartbot::Cluster_<ContainerAllocator2> & rhs)
{
  return lhs.Header == rhs.Header &&
    lhs.id == rhs.id &&
    lhs.mid_x == rhs.mid_x &&
    lhs.mid_y == rhs.mid_y &&
    lhs.dist == rhs.dist &&
    lhs.points == rhs.points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartbot::Cluster_<ContainerAllocator1> & lhs, const ::cartbot::Cluster_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartbot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartbot::Cluster_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartbot::Cluster_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartbot::Cluster_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartbot::Cluster_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartbot::Cluster_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartbot::Cluster_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartbot::Cluster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5483b1a607c3b90a8b87bd87fef9ba45";
  }

  static const char* value(const ::cartbot::Cluster_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5483b1a607c3b90aULL;
  static const uint64_t static_value2 = 0x8b87bd87fef9ba45ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartbot::Cluster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartbot/Cluster";
  }

  static const char* value(const ::cartbot::Cluster_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartbot::Cluster_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header Header\n"
"int32 id\n"
"float64 mid_x\n"
"float64 mid_y\n"
"float64 dist\n"
"geometry_msgs/Point[] points\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cartbot::Cluster_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartbot::Cluster_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Header);
      stream.next(m.id);
      stream.next(m.mid_x);
      stream.next(m.mid_y);
      stream.next(m.dist);
      stream.next(m.points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Cluster_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartbot::Cluster_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartbot::Cluster_<ContainerAllocator>& v)
  {
    s << indent << "Header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.Header);
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "mid_x: ";
    Printer<double>::stream(s, indent + "  ", v.mid_x);
    s << indent << "mid_y: ";
    Printer<double>::stream(s, indent + "  ", v.mid_y);
    s << indent << "dist: ";
    Printer<double>::stream(s, indent + "  ", v.dist);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTBOT_MESSAGE_CLUSTER_H
