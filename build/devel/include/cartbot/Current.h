// Generated by gencpp from file cartbot/Current.msg
// DO NOT EDIT!


#ifndef CARTBOT_MESSAGE_CURRENT_H
#define CARTBOT_MESSAGE_CURRENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <cartbot/Cluster.h>

namespace cartbot
{
template <class ContainerAllocator>
struct Current_
{
  typedef Current_<ContainerAllocator> Type;

  Current_()
    : Header()
    , x(0.0)
    , y(0.0)
    , vx(0.0)
    , vy(0.0)
    , objects()
    , state(0)
    , lost_cnt(0)  {
    }
  Current_(const ContainerAllocator& _alloc)
    : Header(_alloc)
    , x(0.0)
    , y(0.0)
    , vx(0.0)
    , vy(0.0)
    , objects(_alloc)
    , state(0)
    , lost_cnt(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _Header_type;
  _Header_type Header;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef std::vector< ::cartbot::Cluster_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::cartbot::Cluster_<ContainerAllocator> >> _objects_type;
  _objects_type objects;

   typedef uint8_t _state_type;
  _state_type state;

   typedef int32_t _lost_cnt_type;
  _lost_cnt_type lost_cnt;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(STOP)
  #undef STOP
#endif
#if defined(_WIN32) && defined(LOST)
  #undef LOST
#endif
#if defined(_WIN32) && defined(COUNT)
  #undef COUNT
#endif
#if defined(_WIN32) && defined(INIT)
  #undef INIT
#endif
#if defined(_WIN32) && defined(TRACKING)
  #undef TRACKING
#endif

  enum {
    STOP = 0u,
    LOST = 1u,
    COUNT = 2u,
    INIT = 3u,
    TRACKING = 4u,
  };


  typedef boost::shared_ptr< ::cartbot::Current_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cartbot::Current_<ContainerAllocator> const> ConstPtr;

}; // struct Current_

typedef ::cartbot::Current_<std::allocator<void> > Current;

typedef boost::shared_ptr< ::cartbot::Current > CurrentPtr;
typedef boost::shared_ptr< ::cartbot::Current const> CurrentConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cartbot::Current_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cartbot::Current_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::cartbot::Current_<ContainerAllocator1> & lhs, const ::cartbot::Current_<ContainerAllocator2> & rhs)
{
  return lhs.Header == rhs.Header &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.objects == rhs.objects &&
    lhs.state == rhs.state &&
    lhs.lost_cnt == rhs.lost_cnt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::cartbot::Current_<ContainerAllocator1> & lhs, const ::cartbot::Current_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace cartbot

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::cartbot::Current_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cartbot::Current_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartbot::Current_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cartbot::Current_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartbot::Current_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cartbot::Current_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cartbot::Current_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4d01d6a47dea24abe185d87c51f91fc5";
  }

  static const char* value(const ::cartbot::Current_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4d01d6a47dea24abULL;
  static const uint64_t static_value2 = 0xe185d87c51f91fc5ULL;
};

template<class ContainerAllocator>
struct DataType< ::cartbot::Current_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cartbot/Current";
  }

  static const char* value(const ::cartbot::Current_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cartbot::Current_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header Header\n"
"float64 x\n"
"float64 y\n"
"float64 vx\n"
"float64 vy\n"
"cartbot/Cluster[] objects\n"
"uint8 state\n"
"int32 lost_cnt\n"
"uint8 STOP=0\n"
"uint8 LOST=1\n"
"uint8 COUNT=2\n"
"uint8 INIT=3\n"
"uint8 TRACKING=4\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: cartbot/Cluster\n"
"Header Header\n"
"int32 id\n"
"float64 mid_x\n"
"float64 mid_y\n"
"float64 dist\n"
"geometry_msgs/Point[] points\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::cartbot::Current_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cartbot::Current_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Header);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.objects);
      stream.next(m.state);
      stream.next(m.lost_cnt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Current_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cartbot::Current_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cartbot::Current_<ContainerAllocator>& v)
  {
    s << indent << "Header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.Header);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "objects[]" << std::endl;
    for (size_t i = 0; i < v.objects.size(); ++i)
    {
      s << indent << "  objects[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::cartbot::Cluster_<ContainerAllocator> >::stream(s, indent + "    ", v.objects[i]);
    }
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
    s << indent << "lost_cnt: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lost_cnt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CARTBOT_MESSAGE_CURRENT_H
